=pod

=head1 NAME

xde-menu -- generate XDG compliant menus

=head1 SYNOPSIS

xde-menu -- [ OPTIONS ]

=head1 DESCRIPTION

B<xde-menu> is a command-line program that can be used to generate an
XDG compliant menu in a number of formats to support configuration of
the root menu for light-weight window managers.

B<xde-menu> is capable of generating either a complete menu for a
number of well-known window managers, or for generating a sub-menu that
can be included in the root menu of those window managers.

=head1 OPTIONS

B<xde-menu> uses L<getopt_long_only(3)>, so non-ambiguous option
abbreviations are permitted.  B<xde-menu> recognizes the following
options:

=head2 COMMAND OPTIONS

Command options affect the primary operating mode of the program.  Only
one command option can be specified.  B<xde-menu> recognizes the
following command options:

=over

=item B<--monitor>, B<-m>

Specifies that B<xde-menu> is not to exit after successfully
generating the menu, but to monitor pertinent directories for changes,
and regenerate the menu when changes are detected.  This option implies
the B<--output> option, without an argument.

When changes are detected in the application database, the menu is
regenerated after an interval of no changes.  When changes are detected
to the active window manager, the menu is regenerated, to the location
and in the format of the new window manager, after an interval of no
changes.

=item B<--replace>, B<-R>

Replace a currently running instance (that was invoked with the
B<--monitor> option).  It is not an error if no other instance is
running.  This option implies the B<--monitor> option.

=item B<--refresh>, B<-r>

Asks a running instance of B<xde-menu> to refresh the menu.  This is
normally not required as B<xde-menu> detects when desktop files, icons,
themes or window managers have changed and automatically regenerates the
menus.

This is the default when B<xde-menu> is invoked as B<xde-meu-refresh>.
This option causes an error when no current instance of B<xde-menu> is
running.

=item B<--restart>

Asks a running instance of B<xde-menu> to restart (re-execute itself
with the same arguments).  This is useful when the B<xde-menu>
executables have been upgraded.

This is the default when B<xde-menu> is invoked as B<xde-menu-restart>.
This option causes an error when no current instance of B<xde-menu> is
running.

=item B<--popup>, B<-p>

Asks a running instance of B<xde-menu> to pop up the menu.  Depending on
the setting of the B<--button> option, this will either pop up the menu
at the current pointer position, or will pop-up the menu at the centre of
the active screen.  When multiple monitors are present, the menu will
pop up at the centre of the monitor in which the pointer currently
resides (which is used by most tiling window managers as the "current"
monitor.

This is the default when B<xde-menu> is invoked as B<xde-menu-popup>.
This option causes an error when on current instance of B<xde-menu> is
running.

=item B<--quit>, B<-q>

Ask a currently running instance (that was invoked with the B<--monitor>
option) to quit.  It is not an error if no other instance is running.

=item B<--help>, B<-h>

Print usage information, including the current values of option
defaults, and exit.

=item B<--version>, B<-V>

Print version information and exit.

=item B<--copying>, B<-C>

Print coping information and exit.

=back

=head2 GENERAL OPTIONS

=over

=item B<--verbose>, B<-v> [I<LEVEL>]

When generating output, generate more verbose output.  Increments or
sets the output verbosity to I<LEVEL>.

=item B<--debug>, B<-D> [I<LEVEL>]

Print debugging information to standard error during operation.
Increments or sets the debug verbosity to I<LEVEL>.

=item B<--format>, B<-f> I<FORMAT>

Specify the output format.  Recognized output formats are as follows:
L<2bwm(1)>,
L<adwm(1)>,
L<afterstep(1)>,
L<awesome(1)>,
L<blackbox(1)>,
L<ctwm(1)>,
L<cwm(1)>,
L<dtwm(1)>,
L<dwm(1)>,
L<echinus(1)>,
L<etwm(1)>,
L<fluxbox(1)>,
L<flwm(1)>,
L<fvwm(1)>,
L<icewm(1)>,
L<jwm(1)>,
L<matwm2(1)>,
L<metacity(1)>,
L<mwm(1)>,
L<openbox(1)>,
L<pekwm(1)>,
L<spectrwm(1)>,
L<twm(1)>,
L<uwm(1)>,
L<vtwm(1)>,
L<waimea(1)>,
L<wind(1)>,
L<wmaker(1)>,
L<wmx(1)>,
L<yeahwm(1)>.

When unspecified, the setting of the C<_XDE_WM_NAME> property on the
root window (or the C<_NET_WM_NAME> property on the window manager check
window) is examined to determine the format.  This is accomplished by
converting the value of either property to all lower case.  See also,
L</ENVIRONMENT>.

When the program is run in monitoring mode, the format should not be
specified explicitly.

=item B<--fullmenu>, B<-F>, B<--nofullmenu>, B<-N>

When specified, output a full menu and not only the application
sub-menu, or not.  The defaults it to output a full menu.

=item B<--desktop>, B<-d> I<DESKTOP>

Specify the desktop name for C<NotShowIn> and C<OnlyShowInc>
comparisons.  The default is the all upper-case value corresponding to
the format unless C<XDG_CURRENT_DESKTOP> is defined.

=item B<--charset>, B<-c> I<CHARSET>

Specify the character set with which to output the menu.  Defaults to
the character set in use by the current local.

=item B<--language>, B<-l> I<LANGUAGE>

Specify the output language for the menu.  Defaults to the language in
the current locale.

=item B<--root-menu>, B<-r> I<MENU>

Specify the location of the root menu file.  The default is calculated
using XDG environment variables (see L</ENVIRONMENT>), and defaults to
the file F<${XDG_MEU_PREFIX}applications.menu> in the
F<$XDG_CONFIG_HOME:$XDG_CONFIG_DIRS> search path.

=item B<--die-on-error>, B<-e>

Abort execution on any error.

=item B<--output>, B<-o> [I<FILENAME>]

Write output to the file, I<FILENAME>.  This is particularly useful with
option B<--die-on-error> as the output will not be written at all if an
error is encountered.  If the I<FILENAME> is not specified, the default
menu location for the current B<--format> will be used.

=item B<--noicons>, B<-n>

Do not include icons in the generated menu files.  This option has no
effect when it is not possible to generate icons for the menu format.
That is, when the B<--format> is one such as L<blackbox(1)>, or
L<waimea(1)>, it is not possible to place icons in the menu and this
option is therefore ignored.  The default is to place icons in in
capable generated menus.

=item B<--theme>, B<-t> I<THEME>

Specify the icon theme name to use when generating icons.  The default
is to obtain the icon theme name from the default locations (such as
the F<$HOME/.gtk2rc-2.0> file).

=item B<--style>, B<-s> I<STYLE>

Specify which format of output to generate.  I<STYLE> can be one of the
following:

=over

=item I<fullmenu>

The default: output a full menu suitable for use as the root menu
specification for the window manager.

=item I<appmen>

Output a complete menu; however, only output the applications portion of
the menu (no styles, window manager controls, logout, etc.), suitable to
reference as an "Applications" menu.

=item I<entries>

Only output the entires for the menu but not the enclosing menu itself:
this is useful for some pipe menu commands.

=back

=item B<--launch>, B<-L>, B<--nolaunch>

Specifies whether to use L<xdg-launch(1)> to launch the desktop files
directly or not.  This option will only be honoured when the
L<xdg-launch(1)> program is available and accessible.  Also, some window
managers (e.g. L<openbox(1)>) provide their own desktop startup
launching and some don't.  So, the default setting may depend on the
active window manager.

=item B<--menu>, B<-M> I<MENUNAME>

Set the stem of the filename used for the root menu.  This defaults to
"F<applications>."  Other possible values include "F<information>" and
"F<settings>."  The special value "F<all>" specifies that menus are to
be generated for all known stems.

=item B<--button>, B<-b> I<BUTTON>

Only for use in conjunction with the B<--popup> option.  Specifies the
button that was used to invoke the pop-up.  Defaults to zero (0).  This
should be the button that was used to pop the menu.  A window manager
that invokes this command in response to a button press should release
its passive grab on the button before invoking the menu to that the
popped up menu can grab the button.  A I<BUTTON> of zero (0) means that
the program was invoked with a key-press instead of a button.

=item B<--timestamp>, B<-T> I<TIMESTAMP>

Provides the X11 server time-stamp of the event that caused the pop-up.

=back

=head1 SUPPORTED WINDOW MANAGERS

The following window managers and menu environments are supported by
B<xde-menu>:

=over

=item B<--format=>I<2bwm>

Like L<dwm(1)>, L<2bwm(1)> does not provide a root menu; however, it
does provide a mechanism for invoking an external root menu.  This is
used to invoke the GTK+ version of the root menu.

=item B<--format=>I<adwm>

Like L<dwm(1)>, L<adwm(1)> does not provide a root menu; however, it
does provide a mechanism for invoking an external root menu.  This is
used to invoke the GTK+ version of the root menu.

=item B<--format=>I<afterstep>

No support has yet been included for L<afterstep(1)>.

=item B<--format=>I<awesome>

No support has yet been included for L<awesome(1)>.

=item B<--format=>I<blackbox>

L<blackbox(1)> provides a root menu that is formatted similar to
L<fluxbox(1)> and the older L<openbox(1)> menu style.  The primary
difference is that L<blackbox(1)> does not support the display of icons.

=item B<--format=>I<ctwm>

L<ctwm(1)> provides a root menu that is formatted similar to L<twm(1)>.
This root menu format does not support the display of icons.

=item B<--format=>I<cwm>

L<cwm(1)> only provides a rudimentary root menu (with no ability to
generate sub-menus); however, it has the ability to specify command
actions in response to key bindings or mouse buttons and can easily be
configured to launch the GTK+ menu.

=item B<--format=>I<dtwm>

L<dtwm(1)>

=item B<--format=>I<dwm>

L<dwm(1)> does not provide a root menu; however, it does provide a
mechanism for invoking an external root menu.  This is used to invoke
the GTK+ version of the root menu.

=item B<--format=>I<echinus>

Like L<dwm(1)>, L<echinus(1)> does not provide a root menu; however, it
does provide a mechanism for invoking an external root menu.  This is
used to invoke the GTK+ version of the root menu.

=item B<--format=>I<etwm>

L<etwm(1)> provides a root menu that is formatted similar to L<twm(1)>.
This root menu format does not support the display of icons.

=item B<--format=>I<fluxbox>

L<fluxbox(1)> provides a root menu that is formatted similar to
L<blackbox(1)>.  This root menu, however, provides additional support
for the display of icons.

=item B<--format=>I<flwm>

L<flwm(1)> uses a directory of executables instead of a file format in
the identical fashion to the L<wmx(1)> window manager on which it is
based.  It does not support the use of icons in menu items.  In fact,
this is an alias for I<wmx> as the two formats are completely compatible
and interoperable.

=item B<--format=>I<fvwm>

L<fvwm(1)> provides a root menu using its own unique menu format.
Although at one time L<fvwm(1)> used a L<dtwm(1)>-like menu format, it
now uses its own unique L<perl(1)> interface.  L<fvwm(1)> supports the
use of icons in menu items.

=item B<--format=>I<icewm>

L<icewm(1)> provides a programs menu using its own unique menu format.
It support the display of icons in menu items.  L<icewm(1)> does not
provide the ability to specify the entire root menu: some items in the
root menu are fixed by window manager and do not appear in the menu
file.

=item B<--format=>I<jwm>

L<jwm(1)> provides a root menu using its own XML-based menu format.  It
support the display of icons in menu items.  L<jwm(1)> recently had a
rework of its configuration files.  Unless you are on the most current
versions, your mileage may vary.

=item B<--format=>I<matwm2>

Like L<dwm(1)>, L<matwm2(1)> does not provide a root menu; however, it
does provide a mechanism for invoking an external root menu.  This is
used to invoke the GTK+ version of the root menu.

=item B<--format=>I<metacity>

L<metacity(1)> does not provide a root menu; however, it has ample
facility for launching the GTK+ menu.

=item B<--format=>I<mwm>

L<mwm(1)> is the old pre-openmotify window manager that was intended on
providing the capabilities of the L<dtwm(1)> OSF/Motif/CDE window
manager.  It provides a root menu following a similar configuration file
format to L<twm(1)>, L<ctwm(1)>, L<etwm(1)> and L<vtwm(1)>.  It does not
have the ability to display icons in menu items.

=item B<--format=>I<openbox>

=item B<--format=>I<openboxold>

Two formats are supported for the L<openbox(1)> window manager: the
newer openbox-3 XML format (I<openbox>) and the older
L<fluxbox(1)>-like menu format (I<openboxold>). The default for the
L<openbox(1)> window manager is the newer style; however, it still
supports both formats.  Both formats support the use of icons in menu
items.

=item B<--format=>I<pekwm>

L<pekwm(1)> provides a root menu that is formatted using its own file
format.  It supports dynamic menus and provides support for displaying
icons in menu elements.

=item B<--format=>I<perlpanel>

L<perlpanel(1)> can read a L<fluxbox(1)> or L<blackbox(1)> style menu
and generate a GTK+ menu from it.  This format generates a
L<fluxbox(1)>-like menu for use by L<perlpanel(1)>.  (Note that this
format can be specified in addition to other formats, in which case,
this format will be generated as well.)  The menu file is typically
stored in F<~/.perlpanel/menu>, F<~/.config/perlpanel/menu> or
F</usr/share/perlpanel/menu>, independent of which window manager is
currently running.

=item B<--format=>I<spectrwm>

Like L<dwm(1)>, L<spectrwm(1)> does not provide a root menu; however, it
does provide a mechanism for invoking an external root menu.  This is
used to invoke the GTK+ version of the root menu.

=item B<--format=>I<twm>

L<twm(1)> provides a root menu that uses its own format.  L<ctwm(1)>,
L<etwm(1)> and L<vtwm(1)> share this format.  The format does not
support the display of icons in the root menu.

=item B<--format=>I<uwm>

L<uwm(1)> provides a root menu that uses its own format.  The format
supports the use of icons in menu items.

=item B<--format=>I<vtwm>

L<vtwm(1)> provides a root menu that is formatted similar to L<twm(1)>.
This root menu format does not support the display of icons.

=item B<--format=>I<waimea>

L<waimea(1)> provides a root menu that is formatted similar to
L<blackbox(1)>.  As with L<blackbox(1)>, this root menu does not support
the display of icons.

=item B<--format=>I<wind>

L<wind(1)> does not have a root menu: it doesn't have any menus at all.
L<wind(1)> window manager is difficult to support: the window manager
has no mechanism for launching a menu.  However, an external key-binder
such as L<bbkeys(1)> can be used to launch the menu.  Also, it appears
that L<wind(1)> does not grab button clicks on the root window.

=item B<--format=>I<wmaker>

=item B<--format=>I<wmakerold>

Two formats are supported for the L<wmaker(1)> window manager: the newer
window maker lisp-based menu (I<wmaker>) and the older line-based menu
(I<wmakerold>).  The default for the L<wmaker(1)> window manager is the
newer style; however, it still supports both formats.  Neither format
supports the use of icons in menu items.

=item B<--format=>I<wmx>

L<wmx(1)> uses a directory of executables instead of a file format in
the identical fashion to L<flwm(1)>.  It does not support the use of
icons in menu items.  In fact, this is an alias for I<flwm> as the two
formats are completely compatible and interoperable.

=item B<--format=>I<yeahwm>

L<yeahwm(1)> does not have a root menu: it doesn't have any menus at
all.  Therefore, the GTK+ menu must be used.   L<yeahwm(1)> is another
window manager that is difficult to support without an external key
binder (such as L<bbkeys(1)>).  Mouse button clicks on the root window
are intercepted by the window manager.  Support is unlikely.

=back

=head1 ENVIRONMENT

The following environment variables are significant to the operation of
B<xde-menu>:

=over

=item C<$XDG_CURRENT_DESKTOP>

Specifies the current desktop.  When the B<--format> is not specified,
the format defaults to the value of this environment variable converted
to lower-case.  When the B<--desktop> is not specified, the desktop
defaults to the value of this environment variable.

=item C<$XDG_MENU_PREFIX>

Specifies the prefix to apply to the default menu name to derive the
root menu unless specified with the B<--root-menu> option.  When
unspecified, this variable defaults to a null string.

B<xde-menu> finds the root menu using the following logic:

=over

=item 1.

If a file name is specified using the B<--root-menu> option, that file
name is used as the root menu.

=item 2.

If not found, the file name F<${XDG_MENU_PREFIX}applications.menu> is
sought in each of the sub-directories named F<menu> in the path
F<$XDG_CONFIG_HOME:$XDG_CONFIG_DIRS>.

=item 3.

If not found, the file name F<applications.menu> is sought in each of
the F<menu> sub-directories in the path
F<$XDG_CONFIG_HOME:$XDG_CONFIG_DIRS>.

=back

=item C<$XDG_CONFIG_HOME>

Specifies the user XDG configuration directory.  When unspecified, defaults
to F<$HOME/.config> in accordance with XDG specifications.

=item C<$XDG_CONFIG_DIRS>

Specifies the system XDG configuration directories.  When unspecified,
defaults to F</etc/xdg> in accordance with XDG specifications.

=item C<$XDG_DATA_HOME>

Specifies the user XDG data directory.  When unspecified, defaults to
F<$HOME/.local/share> in accordance with XDG specifications.

=item C<$XDG_DATA_DIRS>

Specifies the system XDG data directory search path.  When unspecified,
defaults to F</usr/local/share:/usr/share> in accordance with XDG
specific actions.

=item C<$XDG_ICON_THEME>

Specifies the name of the icon theme.  When not specified, the icon
theme will be determined from configuration sources (e.g.
F<$HOME/.gtkrc-2)>).

=back

=head1 HISTORY

B<xde-menu> was written for a number of reasons:

=over

=item 1.

Existing L<fluxbox(1)> menu generators that read XDG .desktop files
(L<fbmenugen(1)>, L<menutray(1)>) do not conform to the XDG menu
generation specifications and in particular are incapable of merging
menus.

=item 2.

Existing XDG menu generators (such as the SuSE L<xdg_menu(1)> script) do
not property merge default merge directories and do not observer
C<E<lt>LayourtE<gt>> commands.  Also, they are poor at including icons
in the generated menus.  They , of course, do not generate tray menus
either.

=item 3.

Existing XDG menu generators run once and keep cache information, or
have a C<regenerate> command placed in the menu.  They do not monitor
XDG directories for changes and update menus on changes.

=item 4.

The L<lxpanel(1)> and L<pcmanfm(1)> menu generators do not have any of
the above deficiencies; however, they do not create window manager
specific sub-menus.

=back

=head1 AUTHOR

Brian Bidulock L<mailto:bidulock@openss7.org>.

=head1 SEE ALSO

L<xde-style(1)>,
L<inotify(7)>

=cut

# vim:set ft=pod tw=72 nocin:
