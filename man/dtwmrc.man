'\" rtp
.\" vim: ft=nroff sw=4 noet nocin nosi com=b\:.\\\" fo+=tcqlorn tw=77
.TH DTWMRC 4 "2015-08-06" "CDE 2.2.3" "DTWM Resource File"
.SH "NAME"
\fBdtwmrc\fP \(em dtwm
Window Manager Resource Description File
.SH "DESCRIPTION"
.PP
The \fBmwmrc\fP file is a supplementary resource file that controls much of
the behavior of the CDE window manager \fBdtwm\fP. It contains descriptions
of resources that cannot easily be written using standard X Window System,
Version 11 resource syntax. The resource description file contains entries
that are referred to by X resources in defaults files (for example,
\fI/usr/dt/app-defaults/\fP\fB$LANG\fP\fI/Dtwm\fP) or in the
\fBRESOURCE_MANAGER\fP property on the root window. For example, the resource
description file enables you to specify different types of window menus;
however, an X resource is used to specify which of these window menus the
\fBdtwm\fP should use for a particular window. The specifications of the
resource description file supported by the dtwm workspace manager are a
strict superset of the specifications supported by the OSF Motif Window
Manager (\fBmwm 1.2.4\fP). In other words, the \fIsystem.mwmrc\fP or
\fB$HOME\fP\fI/.mwmrc\fP file that you've used for \fBmwm\fP is easily made
usable by \fBdtwm\fP. To merge your personal mwm resource specifications into
dtwm:
.IP \(bu 2
Copy either \fI/etc/dt/config/\fP\fB$LANG\fP\fI/sys.dtwmrc\fP or
\fI/usr/dt/config/\fP\fB$LANG\fP\fI/sys.dtwmrc\fP to
\fB$HOME\fP\fI/.dt/dtwmrc\fP.
.IP \(bu
Use a text editor to move menu definitions, key bindings, and button bindings
from your \fI.mwmrc\fP file to your \fBdtwmrc\fP file. To merge your key and
button bindings, you'll need to augment the key and button bindings that are
referenced by \fBdtwm\fP by default (refer to \fBbuttonBindings\fP and
\fBkeyBindings\fP resources in the \fBdtwm\fP app-defaults file
\fI/usr/dt/app-defaults/\fP\fB$LANG\fP\fI/Dtwm\fP). To replace the key or
button bindings, you'll also need to modify your personal \fBkeyBindings\fP
and \fBbuttonBindings\fP resources.
.IP \(bu 2
Restart \fBdtwm\fP.
.SS "Location"
.PP
The workspace manager searches for one of the following resource description
files, where \fB$LANG\fP is the value of the language environment on a
per-user basis: \fB$HOME\fP\fI/.dt/\fP\fB$LANG\fP\fI/dtwmrc\fP
\fB$HOME\fP\fI/.dt/dtwmrc\fP
\fI/etc/dt/config/\fP\fB$LANG\fP\fI/sys.dtwmrc\fP
\fI/etc/dt/config/sys.dtwmrc\fP
\fI/usr/dt/config/\fP\fB$LANG\fP\fI/sys.dtwmrc\fP
\fI/usr/dt/config/sys.dtwmrc\fP The first file found is the first used. If no
file is found, a set of built-in specifications is used. A particular
resource description file can be selected using the \fIconfigFile\fP
resource. The following shows how a different resource description file can
be specified from the command line:
.sp
.RS
.nf
/usr/dt/bin/dtwm -xrm "Dtwm*configFile: mydtwmrc"
.fi
.RE
.SS "Resource Types"
.PP
The following types of resources can be described in the dtwm resource
description file:
.TP
\fBButtons\fP
Workspace manager functions can be bound (associated) with button events.
.TP
\fBKeys\fP
Workspace manager functions can be bound (associated) with key press events.
.TP
\fBMenus\fP
Menu panes can be used for the window menu and other menus posted with key
bindings and button bindings.
.SH "DTWM RESOURCE DESCRIPTION FILE SYNTAX"
.PP
The \fBdtwm\fP resource description file is a standard text file that
contains items of information separated by blanks, tabs, and new lines
characters. Blank lines are ignored. Items or characters can be quoted to
avoid special interpretation (for example, the comment character can be
quoted to prevent it from being interpreted as the comment character).  A
quoted item can be contained in double quotes (\fB" "\fP).  Single characters
can be quoted by preceding them by the back-slash character (\fB\\\fP),
except for workspace names, which may contain no back-slash characters. If a
line ends with a back-slash, the next line is considered a continuation of
that line. All text from an unquoted \fB#\fP to the end of the line is
regarded as a comment and is not interpreted as part of a resource
description. If \fB!\fP is the first character in a line, the line is
regarded as a comment.
.SS "Workspace Manager Functions"
.PP
Workspace manager functions can be accessed with button and key bindings, and
with workspace manager menus. Functions are indicated as part of the
specifications for button and key binding sets, and menu panes. The function
specification has the following syntax:
.sp
.RS
.nf
\fBfunction\fP = \fBfunction_name\fP [\fBfunction_args\fP]
\fBfunction_name\fP = \fBworkspace manager function\fP
\fBfunction_args\fP = {\fBquoted_item\fP | \fBunquoted_item\fP}
.fi
.RE
.PP
The following functions are supported. If a function is specified that isn't
one of the supported functions then it is interpreted by \fBdtwm\fP as
\fBf.nop\fP.
.TP
\fBf.action\fP
This function causes the specified \fBaction\fP to be invoked by means of the
message server.
.TP
\fBf.beep\fP
This function causes a beep.
.TP
\fBf.circle_down\fP [ \fBicon\fP | \fBwindow\fP]
This function causes the window or icon that is on the top of the window
stack to be put on the bottom of the window stack (so that it is no longer
obscuring any other window or icon). This function affects only those windows
and icons that are obscuring other windows and icons, or that are obscured by
other windows and icons. Secondary windows (that is, transient windows) are
restacked with their associated primary window. Secondary windows always stay
on top of the associated primary window and there can be no other primary
windows between the secondary windows and their primary window. If an
\fBicon\fP function argument is specified, then the function applies only to
icons. If a \fBwindow\fP function argument is specified then the function
applies only to windows.
.TP
\fBf.circle_up\fP [ \fBicon\fP | \fBwindow\fP]
This function raises the window or icon on the bottom of the window stack (so
that it is not obscured by any other windows). This function affects only
those windows and icons that are obscuring other windows and icons, or that
are obscured by other windows and icons. Secondary windows (that is,
transient windows) are restacked with their associated primary window. If an
\fBicon\fP function argument is specified then the function applies only to
icons. If an \fBwindow\fP function argument is specified then the function
applies only to windows.
.TP
\fBf.create_workspace\fP
This function creates a new workspace. The new workspace name is generated
automatically and is of the form \fBws_\fP\fBn\fP where \fBn\fP is an
integer.
.TP
\fBf.delete_workspace\fP
This function deletes the current workspace. Windows that reside only in this
workspace will be moved to the next workspace. If the last workspace is being
deleted, then windows will be moved to the first workspace.
.TP
\fBf.exec\fP \fBcommand\fP (or \fB!\fP \fBcommand\fP)
This function causes \fBcommand\fP to be executed (using the value of the
\fB$MWMSHELL\fP or \fB$SHELL\fP environment variable if set; otherwise,
\fI/usr/bin/sh\fP ). The \fB!\fP notation can be used in place of the
\fBf.exec\fP function name.
.TP
\fBf.focus_color\fP
This function sets the colormap focus to a client window. If this function is
done in a root context, then the default colormap (setup by the X Window
System for the screen where \fBdtwm\fP is running) is installed and there is
no specific client window colormap focus. This function is treated as
\fBf.nop\fP if \fBcolormapFocusPolicy\fP is not explicit.
.TP
\fBf.focus_key\fP
This function sets the keyboard input focus to a client window or icon.  This
function is treated as \fBf.nop\fP if \fBkeyboardFocusPolicy\fP is not
explicit or the function is executed in a root context.
.TP
\fBf.goto_workspace\fP \fBworkspace\fP
This function causes the workspace manager to switch to the workspace named
by \fBworkspace\fP. If no workspace exists by the specified name, then no
action occurs. Note that adding and deleting workspaces dynamically and
affect this function.
.TP
\fBf.help\fP [\fBtopic\fP [\fBvolume\fP]]
This function displays help on the specified \fBtopic\fP and \fBvolume\fP. If
no \fBvolume\fP is given, then the workspace manager volume is assumed. If no
\fBtopic\fP is given, then help on the front panel is shown.
.TP
\fBf.help_mode\fP
This function causes the workspace manager to enter into help mode.  In help
mode, the pointer changes shape to indicate that the window manager is
waiting for you to select a front panel control. Any help defined for the
control is then shown in a help window.
.TP
\fBf.kill\fP
This function is used to close application windows. The actual processing
that occurs depends on the protocols that the application observes. The
application lists the protocols it observes in the \fBWM_PROTOCOLS\fP
property on its top level window. If the application observes the
\fBWM_DELETE_WINDOW\fP protocol, it is sent a message that requests the
window be deleted.  If the application observes both \fBWM_DELETE_WINDOW\fP
and \fBWM_SAVE_YOURSELF\fP, it is sent one message requesting the window be
deleted and another message advising it to save its state. If the application
observes only the \fBWM_SAVE_YOURSELF\fPprotocol \fB,\fP it is sent a message
advising it to save its state. After a delay (specified by the resource
\fBquitTimeout\fP), the application's connection to the X server is
terminated. If the application observes neither of these protocols, its
connection to the X server is terminated.
.TP
\fBf.lower\fP [\fB-\fP \fBclient\fP | \fBwithin\fP | \fBfreeFamily\fP]
This function lowers a primary window to the bottom of the global window
stack (where it obscures no other window) and lowers the secondary window
(transient window or dialog box) within the client family. The arguments to
this function are mutually exclusive. The \fBclient\fP argument indicates the
name or class of a client to lower. The name or class of a client appears in
the \fBWM_CLASS\fP property on the client's top-level window. If the
\fBclient\fP argument is not specified, the context that the function was
invoked in indicates the window or icon to lower. Specifying \fBwithin\fP
lowers the secondary window within the family (staying above the parent) but
does not lower the client family in the global window stack. Specifying
\fBfreeFamily\fP lowers the window to the bottom of the global windows stack
from its local family stack.
.TP
\fBf.marquee_selection\fP
This function is only useful in conjunction with the CDE file manager (see
.BR dtfile (5)).
It enables selection of file manager objects that have been placed on the
root window. It must be bound to a button when used.
.TP
\fBf.maximize\fP
This function causes a client window to be displayed with its maximum size.
Refer to the \fBmaximumClientSize\fP, \fBmaximumMaximumSize\fP, and
\fBlimitResize\fP resources in
.BR dtwm (1).
.TP
\fBf.menu\fP \fBmenu_name\fP
This function associates a cascading (pull-right) menu with a menu pane entry
or a menu with a button or key binding. The \fBmenu_name\fP function argument
identifies the menu to be used.
.TP
\fBf.minimize\fP
This function causes a client window to be minimized (iconified). When a
window is minimized with no icon box in use, and if the \fBlowerOnIconify\fP
resource has the value True (the default), the icon is placed on the bottom
of the window stack (such that it obscures no other window).  If an icon box
is used, then the client's icon changes to its iconified form inside the icon
box. Secondary windows (that is, transient windows) are minimized with their
associated primary window. There is only one icon for a primary window and
all its secondary windows.
.TP
\fBf.move\fP
This function initiates an interactive move of a client window.
.TP
\fBf.next_cmap\fP
This function installs the next colormap in the list of colormaps for the
window with the colormap focus.
.TP
\fBf.next_key\fP [ \fBicon\fP | \fBwindow\fP | \fBtransient\fP]
This function sets the keyboard input focus to the next window/icon in the
set of windows/icons managed by the workspace manager (the ordering of this
set is based on the stacking of windows on the screen). This function is
treated as \fBf.nop\fP if \fBkeyboardFocusPolicy\fP is not explicit. The
keyboard input focus is only moved to windows that do not have an associated
secondary window that is application modal. If the \fBtransient\fP argument
is specified, then transient (secondary) windows are traversed (otherwise, if
only \fBwindow\fP is specified, traversal is done only to the last focused
window in a transient group). If an \fBicon\fP function argument is
specified, then the function applies only to icons. If a \fBwindow\fP
function argument is specified, then the function applies only to windows.
.TP
\fBf.next_workspace\fP
This function causes the workspace manager to switch to the next workspace.
If the last workspace is currently active, then this function will switch to
the first workspace.
.TP
\fBf.nop\fP
This function does nothing.
.TP
\fBf.normalize\fP
This function causes a client window to be displayed with its normal size.
Secondary windows (that is, transient windows) are placed in their normal
state along with their associated primary window.
.TP
\fBf.normalize_and_raise\fP
This function causes a client window to be displayed with its normal size and
raised to the top of the window stack. Secondary windows (that is, transient
windows) are placed in their normal state along with their associated primary
window.
.TP
\fBf.occupy_all\fP
This function causes the associated window to be placed in all workspaces.
.TP
\fBf.pack_icons\fP
This function is used to relayout icons (based on the layout policy being
used) on the root window or in the icon box. In general this causes icons to
be "packed" into the icon grid.
.TP
\fBf.pass_keys\fP
This function is used to enable/disable (toggle) processing of key bindings
for workspace manager functions. When it disables key binding processing all
keys are passed on to the window with the keyboard input focus and no
workspace manager functions are invoked. If the \fBf.pass_keys\fP function is
invoked with a key binding to disable key binding processing the same key
binding can be used to enable key binding processing.
.TP
\fBf.post_wmenu\fP
This function is used to post the window menu. If a key is used to post the
window menu and a window menu button is present, the window menu is
automatically placed with its top-left corner at the bottom-left corner of
the window menu button for the client window. If no window menu button is
present, the window menu is placed at the top-left corner of the client
window.
.TP
\fBf.prev_cmap\fP
This function installs the previous colormap in the list of colormaps for the
window with the colormap focus.
.TP
\fBf.prev_key\fP [ \fBicon\fP | \fBwindow\fP | \fBtransient\fP]
This function sets the keyboard input focus to the previous window/icon in
the set of windows/icons managed by the workspace manager (the ordering of
this set is based on the stacking of windows on the screen). This function is
treated as \fBf.nop\fP if \fBkeyboardFocusPolicy\fP is not explicit. The
keyboard input focus is only moved to windows that do not have an associated
secondary window that is application modal.  If the \fBtransient\fP argument
is specified, then transient (secondary) windows are traversed (otherwise, if
only \fBwindow\fP is specified, traversal is done only to the last focused
window in a transient group). If an \fBicon\fP function argument is specified
then the function applies only to icons. If an \fBwindow\fP function argument
is specified then the function applies only to windows.
.TP
\fBf.prev_workspace\fP
This function causes the workspace manager to switch to the previous
workspace. If the first workspace is currently active, then this function
switches to the last workspace.
.TP
\fBf.quit_mwm\fP
This function terminates dtwm (but NOT the X window system).
.TP
\fBf.raise\fP [\fB-\fP\fBclient\fP | \fBwithin\fP | \fBfreeFamily\fP]
This function raises a primary window to the top of the global window stack
(where it is obscured by no other window) and raises the secondary window
(transient window or dialog box) within the client family. The arguments to
this function are mutually exclusive. The \fBclient\fP argument indicates the
name or class of a client to lower. If the \fBclient\fP is not specified, the
context that the function was invoked in indicates the window or icon to
lower. Specifying \fBwithin\fP raises the secondary window within the family
but does not raise the client family in the global window stack. Specifying
\fBfreeFamily\fP raises the window to the top of its local family stack
and raises the family to the top of the global window stack.
.TP
\fBf.raise_lower\fP [ \fBwithin\fP | \fBfreeFamily\fP]
This function raises a primary window to the top of the global window stack
if it is partially obscured by another window; otherwise, it lowers the
window to the bottom of the window stack. The arguments to this function are
mutually exclusive. Specifying \fBwithin\fP raises a secondary window within
the family (staying above the parent window), if it is partially obscured by
another window in the application's family; otherwise, it lowers the window
to the bottom of the family stack. It has no effect on the global window
stacking order. Specifying \fBfreeFamily\fP raises the window to the top of
its local family stack, if obscured by another window, and raises the family
to the top of the global window stack; otherwise, it lowers the window to the
bottom of its local family stack and lowers the family to the bottom of the
global window stack.
.TP
\fBf.refresh\fP
This function causes all windows to be redrawn.
.TP
\fBf.refresh_win\fP
This function causes a client window to be redrawn.
.TP
\fBf.remove\fP
This function causes a client window to be removed from the current
workspace. If the client window exists only in this workspace, no action
occurs.
.TP
\fBf.resize\fP
This function initiates an interactive resize of a client window.
.TP
\fBf.restore\fP
This function restores the previous state of an icon's associated window.  If
a maximized window is iconified, then \fBf.restore\fP restores it to its
maximized state. If a normal window is iconified, then \fBf.restore\fP
restores it to its normalized state.
.TP
\fBf.restore_and_raise\fP
This function restores the previous state of an icon's associated window and
raises the window to the top of the window stack. If a maximized window is
iconified, then \fBf.restore_and_raise\fP restores it to its maximized state
and raises it to the top of the window stack. If a normal window is
iconified, then \fBf.restore_and_raise\fP restores it to its normalized state
and raises it to the top of the window stack.
.TP
\fBf.restart\fP
This function causes dtwm to be restarted (effectively terminated and
re-executed). Restart is necessary for \fBdtwm\fP to incorporate changes in
both the \fBdtwmrc\fP file and X resources.
.TP
\fBf.screen\fP [ \fBnext\fP | \fBprev\fP | \fBback\fP | \fBscreen_number\fP]
This function causes the pointer to be warp to a specific screen number or to
the \fBnext\fP, \fBprevious\fP, or last visited (\fBback\fP) screen. The
arguments to this function are mutually exclusive. The \fBscreen_number\fP
argument indicates the screen number that the pointer is to be warped.
Screens are numbered starting from screen 0. Specifying \fBnext\fP cause the
pointer to warp to the next managed screen (skipping over any unmanaged
screens). Specifying \fBprev\fP cause the pointer to warp to the previous
managed screen (skipping over any unmanaged screens). Specifying \fBback\fP
cause the pointer to warp to the last visited screen.
.TP
\fBf.send_msg\fP \fBmessage_number\fP
This function sends an \fBXClientMessageEvent\fP of type
\fB_MOTIF_WM_MESSAGES\fP with \fBmessage_type\fP set to \fBmessage_number\fP.
The client message is sent only if \fBmessage_number\fP is included in the
client's \fB_MOTIF_WM_MESSAGES\fP property. A menu item label is grayed out
if the menu item is used to do \fBf.send_msg\fP of a message that is not
included in the client's \fB_MOTIF_WM_MESSAGES\fP property.
.TP
\fBf.separator\fP
This function causes a menu separator to be put in the menu pane at the
specified location (the label is ignored).
.TP
\fBf.set_behavior\fP
This function causes the workspace manager to restart with the default
behavior (if a custom behavior is configured) or a custom behavior (if a
default behavior is configured). By default this is bound to \fBShift Ctrl
Alt <Key>!\fP.
.TP
\fBf.title\fP
This function inserts a title in the menu pane at the specified location.
.TP
\fBf.toggle_frontpanel\fP
If the front panel is in the normal state, this function causes it to be
minimized. If the front panel is minimized, this function will change it to
the normal state.
.TP
\fBf.version\fP
This function causes the workspace manager to display its release version in
a dialog box.
.TP
\fBf.workspace_presence\fP
This function displays the workspace presence (or "Occupy Workspace") dialog
box. This dialog allows you to view and set the workspace in which a
particular window resides. The root context is disallowed for this function.
.SS "Function Constraints"
.PP
Each function may be constrained as to which resource types can specify the
function (for example, menu pane) and also what context the function can be
used in (for example, the function is done to the selected client window).
Function contexts are:
.TP
\fBroot\fP
No client window or icon has been selected as an object for the function.
.TP
\fBwindow\fP
A client window has been selected as an object for the function. This
includes the window's title bar and frame. Some functions are applied only
when the window is in its normalized state (for example, \fBf.maximize\fP) or
its maximized state (for example, \fBf.normalize\fP).
.TP
\fBicon\fP
An icon has been selected as an object for the function.
.PP
If a function is specified in a type of resource where it is not supported or
is invoked in a context that does not apply then the function is treated as
\fBf.nop\fP. The following table indicates the resource types and function
contexts in which workspace manager functions apply.
.RS
.TS
tab(:);
lblblb.
Function:Contexts:Resources
_:_:_
.T&
lbll.
f.action:root,icon,window:button,key,menu
f.beep:root,icon,window:button,key,menu
f.circle_down:root,icon,window:button,key,menu
f.circle_up:root,icon,window:button,key,menu
f.create_workspace:root,icon,window:button,key,menu
f.delete_workspace:root,icon,window:button,key,menu
f.exec:root,icon,window:button,key,menu
f.focus_color:root,icon,window:button,key,menu
f.focus_key:root,icon,window:button,key,menu
f.goto_workspace:root,icon,window:button,key,menu
f.help:root,icon,window:button,key,menu
f.help_mode:root,icon,window:button,key,menu
f.kill:icon,window:button,key,menu
f.lower:root,icon,window:button,key,menu
f.marquee_selection:root:button
f.maximize:icon,window(normal):button,key,menu
f.menu:root,icon,window:button,key,menu
f.minimize:window:button,key,menu
f.move:icon,window:button,key,menu
f.next_cmap:root,icon,window:button,key,menu
f.next_key:root,icon,window:button,key,menu
f.next_workspace:root,icon,window:button,key,menu
f.nop:root,icon,window:button,key,menu
f.normalize:icon,window(maximized):button,key,menu
f.normalize_and_raise:icon,window:button,key,menu
f.occupy_all:icon,window:button,key,menu
f.pack_icons:root,icon,window:button,key,menu
f.pass_keys:root,icon,window:button,key,menu
f.post_wmenu:root,icon,window:button,key
f.prev_cmap:root,icon,window:button,key,menu
f.prev_key:root,icon,window:button,key,menu
f.prev_workspace:root,icon,window:button,key,menu
f.quit_dtwm:root:button,key,menu
f.raise:root,icon,window:button,key,menu
f.raise_lower:icon,window:button,key,menu
f.refresh:root,icon,window:button,key,menu
f.refresh_win:window:button,key,menu
f.remove:root,icon,window:button,key,menu
f.resize:window:button,key,menu
f.restart:root:button,key,menu
f.restore:icon,window:button,key,menu
f.restore_and_raise:icon,window:button,key,menu
f.screen:root,icon,window:button,key,menu
f.send_msg:icon,window:button,key,menu
f.separator:root,icon,window:menu
f.set_behavior:root,icon,window:button,key,menu
f.title:root,icon,window:menu
f.toggle_frontpanel:root,icon,window:button,key,menu
f.version:root,icon,window:button,key,menu
f.workspace_presence:window:button,key,menu
.TE
.RE
.SH "WORKSPACE MANAGER EVENT SPECIFICATION"
.PP
Events are indicated as part of the specifications for button and key binding
sets, and menu panes. Button events have the following syntax:
.sp
.RS 
.nf
\fBbutton\fP =~[\fBmodifier_list\fP]\fB<\fP\fBbutton_event_name\fP \fB>\fP
\fBmodifier_list\fP =~\fBmodifier_name\fP { \fBmodifier_name\fP}
.fi
.RE
.PP
The following table indicates the values that can be used for
\fBmodifier_name\fP. Note that [Alt] and [Meta] can be used interchangably on
some hardware.
.RS
.TS
tab(:);
lblb.
Modifier:Description
_:_
.T&
lbl.
Ctrl:Control Key
Shift:Shift Key
Alt:Alt Key
Meta:Meta Key
Mod1:Modifier1
Mod2:Modifier2
Mod3:Modifier3
Mod4:Modifier4
Mod5:Modifier5
.TE
.RE
.PP
Locking modifiers are ignored when processing button and key bindings.  The
following table lists keys that are interpreted as locking modifiers.  The X
server may map some of these symbols to the Mod1 - Mod5 modifier keys.  These
keys may or may not be available on your hardware: Key Symbol Caps Lock Shift
Lock Kana Lock Num Lock Scroll Lock The following table indicates the values
that can be used for \fBbutton_event_name\fP.
.RS
.TS
tab(:);
lblb.
Button:Description
_:_
.T&
lbl.
Btn1Down:Button 1 Press
Btn1Up:Button 1 Release
Btn1Click:Button 1 Press and Release
Btn1Click2:Button 1 Double Click
Btn2Down:Button 2 Press
Btn2Up:Button 2 Release
Btn2Click:Button 2 Press and Release
Btn2Click2:Button 2 Double Click
Btn3Down:Button 3 Press
Btn3Up:Button 3 Release
Btn3Click:Button 3 Press and Release
Btn3Click2:Button 3 Double Click
Btn4Down:Button 4 Press
Btn4Up:Button 4 Release
Btn4Click:Button 4 Press and Release
Btn4Click2:Button 4 Double Click
Btn5Down:Button 5 Press
Btn5Up:Button 5 Release
Btn5Click:Button 5 Press and Release
Btn5Click2:Button 5 Double Click
.TE
.RE
.PP
Key events that are used by the workspace manager for menu mnemonics and for
binding to workspace manager functions are single key presses; key releases
are ignored. Key events have the following syntax:
.sp
.RS 
.nf
\fBkey\fP =~[\fBmodifier_list\fP] \fIKey\fP\fBkey_name\fP
\fBmodifier_list\fP =~\fBmodifier_name\fP { \fBmodifier_name\fP}
.fi
.RE
.PP
All modifiers specified are interpreted as being exclusive (this means that
only the specified modifiers can be present when the key event occurs).
Modifiers for keys are the same as those that apply to buttons. The
\fBkey_name\fP is an X11 keysym name. Keysym names can be found in the
\fIkeysymdef.h\fP file (remove the \fBXK_\fP prefix).
.SH "BUTTON BINDINGS"
.PP
The \fBbuttonBindings\fP resource value is the name of a set of button
bindings that are used to configure workspace manager behavior.  A workspace
manager function can be done when a button press occurs with the pointer over
a framed client window, an icon or the root window. The context for
indicating where the button press applies is also the context for invoking
the workspace manager function when the button press is done (significant for
functions that are context sensitive). The button binding syntax is
.sp
.RS 
.nf
\fBButtons\fP \fBbindings_set_name\fP
\fB{\fP
    \fBbutton\fP    \fBcontext\fP    \fBfunction\fP
    \fBbutton\fP    \fBcontext\fP    \fBfunction\fP
    ...
    \fBbutton\fP    \fBcontext\fP    \fBfunction\fP
\fB}\fP
.fi
.RE
.PP
The syntax for the \fBcontext\fP specification is: \fBcontext\fP =
\fBobject\fP[\fB|\fP \fBcontext\fP] \fBobject\fP = \fBroot\fP | \fBicon\fP |
\fBwindow\fP | \fBtitle\fP | \fBframe\fP | \fBborder\fP | \fBapp\fP The
context specification indicates where the pointer must be for the button
binding to be effective. For example, a context of \fBwindow\fP indicates
that the pointer must be over a client window or window management frame for
the button binding to be effective.  The \fBframe\fP context is for the
window management frame around a client window (including the border and
titlebar), the \fBborder\fP context is for the border part of the window
management frame (not including the titlebar), the \fBtitle\fP context is for
the title area of the window management frame, and the \fBapp\fP context is
for the application window (not including the window management frame). If an
\fBf.nop\fP function is specified for a button binding, the button binding is
not done.
.SH "KEY BINDINGS
The \fBkeyBindings\fP resource value is the name of a set of key bindings
that are used to configure workspace manager behavior. A window manager
function can be done when a particular key is pressed. The context in which
the key binding applies is indicated in the key binding specification.  The
valid contexts are the same as those that apply to button bindings. The key
binding syntax is:
.sp
.RS 
.nf
\fBKeys\fP \fBbindings_set_name\fP
\fB{\fP
    \fBkey\fP    \fBcontext\fP    \fBfunction\fP
    \fBkey\fP    \fBcontext\fP    \fBfunction\fP
    ...
    \fBkey\fP    \fBcontext\fP    \fBfunction\fP
\fB}\fP
.fi
.RE
.PP
If an \fBf.nop\fP function is specified for a key binding, the key binding is
not done. If an \fBf.post_wmenu\fP or \fBf.menu\fP function is bound to a
key, \fBdtwm\fP automatically uses the same key for removing the menu from
the screen after it has been popped up. The \fBcontext\fP specification
syntax is the same as for button bindings with one addition. The context
\fBifkey\fP may be specified for binding keys that may not be available on
all displays.  If the key is not available and if \fBifkey\fP is in the
context, then reporting of the error message to the error log is suppressed.
This feature is useful for networked, heterogeneous environments. For key
bindings, the \fBframe\fP, \fBtitle\fP, \fBborder\fP, and \fBapp\fP contexts
are equivalent to the \fBwindow\fP context.  The context for a key event is
the window or icon that has the keyboard input focus (\fBroot\fP if no window
or icon has the keyboard input focus).
.SH "MENU PANES"
.PP
Menus can be popped up using the \fBf.post_wmenu\fP and \fBf.menu\fP
workspace manager functions. The context for workspace manager functions that
are done from a menu is \fBroot\fP, \fBicon\fP or \fBwindow\fP depending on
how the menu was popped up. In the case of the \fBwindow\fP menu or menus
popped up with a key binding, the location of the keyboard input focus
indicates the context. For menus popped up using a button binding, the
context of the button binding is the context of the menu. The menu pane
specification syntax is:
.sp
.RS 
.nf
\fBMenu\fP \fBmenu_name\fP
\fB{\fP
    \fBlabel\fP  [\fBmnemonic\fP]  [\fBaccelerator\fP]   \fBfunction\fP
    \fBlabel\fP  [\fBmnemonic\fP]  [\fBaccelerator\fP]   \fBfunction\fP
    ...
    \fBlabel\fP  [\fBmnemonic\fP]  [\fBaccelerator\fP]   \fBfunction\fP
\fB}\fP
.fi
.RE
.PP
Each line in the \fBMenu\fP specification identifies the label for a menu
item and the function to be done if the menu item is selected. Optionally a
menu button mnemonic and a menu button keyboard accelerator may be specified.
Mnemonics are functional only when the menu is posted and keyboard traversal
applies. The \fBlabel\fP may be a string or a bitmap file. The label
specification has the following syntax:
.sp
.RS 
.nf
\fBlabel\fP = \fBtext\fP | \fBbitmap_file\fP
\fBbitmap_file\fP = \fB@\fP\fBfile_name\fP
\fBtext\fP = \fBquoted_item\fP | \fBunquoted_item\fP
.fi
.RE
.PP
The string encoding for labels must be compatible with the menu font that is
used. Labels are greyed out for menu items that do the \fBf.nop\fP function
or an invalid function or a function that doesn't apply in the current
context. A \fBmnemonic\fP specification has the following syntax:
.sp
.RS 
.nf
\fBmnemonic\fP = \fB_\fP \fBcharacter\fP
.fi
.RE
.PP
The first matching \fBcharacter\fP in the label is underlined.  If there is
no matching \fBcharacter\fP in the label, no mnemonic is registered with the
workspace manager for that label. Although the \fBcharacter\fP must exactly
match a character in the label, the mnemonic does not execute if any modifier
(such as Shift) is pressed with the character key. The \fBaccelerator\fP
specification is a key event specification with the same syntax as is used
for key bindings to workspace manager functions.
.SH "INCLUDING FILES"
.PP
You may include other files into your dtwmrc file by using the
\fBinclude\fP construct. For example,
.sp
.RS 
.nf
INCLUDE
{
    /usr/local/shared/dtwm.menus
    /home/kmt/personal/my.bindings
}
.fi
.RE
.PP
causes the files named to be read in and interpreted in order as an
additional part of the dtwmrc file. \fBInclude\fP is a top-level construct.
It cannot be nested inside another construct.
.SH "WARNINGS"
.PP
Errors that occur during the processing of the resource description file are
recorded in: \fI$HOME/.dt/errorlog\fP. Be sure to check this file if the
appearance or behavior of \fBdtwm\fP is not what you expect.
.SH "FILES"
.PP
.IR $HOME/.dt/$LANG/dtwmrc ,
.IR $HOME/.dt/dtwmrc ,
.IR /etc/dt/config/$LANG/sys.dtwmrc ,
.IR /etc/dt/config/sys.dtwmrc ,
.IR /usr/dt/config/$LANG/sys.dtwmrc ,
.IR /usr/dt/config/sys.dtwmrc ,
.IR $HOME/.dt/errorlog .
.SH "RELATED INFORMATION"
.PP
.BR dtwm (1),
.BR mwm (1),
.BR dtfile (5),
.BR X (1).
